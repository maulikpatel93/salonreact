{"ast":null,"code":"import axios from \"axios\";\nimport { store } from \"../store\";\nimport config from \"../config\";\nimport authHeader from \"./auth-header\";\nconst API_URL = config.API_URL;\n\nconst view = values => {\n  const auth = store.getState().auth;\n  const auth_key = auth.user.auth_key;\n  const sort = values && values.sort;\n  const page = values && values.page;\n  const next_page_url = values && values.next_page_url;\n  const result = values && values.result ? values.result : '';\n  let sortstring = \"\";\n\n  if (sort) {\n    let sortArray = [];\n    Object.keys(sort).map(function (key, index) {\n      sortArray[index] = `sort[${key}]=${sort[key]}`;\n    });\n\n    if (sortArray.length > 0) {\n      let jsort = sortArray.join(\"&\");\n      sortstring = jsort;\n    }\n  }\n\n  const pagination = values && values.option ? false : true;\n  const action = page ? `afterlogin/tax/view?page=${page}&${sortstring}` : `afterlogin/tax/view?${sortstring}`;\n  const data = {\n    auth_key: auth_key,\n    action: action,\n    salon_id: auth.user.salon_id,\n    pagination: values && values.id ? false : pagination,\n    //true or false\n    id: values && values.id ? values.id : \"\",\n    field: values && values.id ? \"\" : \"name,description,percentage\",\n    // first_name,last_name,email\n    salon_field: false,\n    //business_name,owner_name\n    result: result,\n    //business_name,owner_name\n    option: values && values.option ? values.option : ''\n  };\n  return axios.post(next_page_url ? `${next_page_url}&${sortstring}` : API_URL + action, data, {\n    headers: authHeader()\n  });\n};\n\nconst taxApiController = {\n  view\n};\nexport default taxApiController;","map":{"version":3,"sources":["/opt/lampp/htdocs/git/salonreact/src/services/tax.service.js"],"names":["axios","store","config","authHeader","API_URL","view","values","auth","getState","auth_key","user","sort","page","next_page_url","result","sortstring","sortArray","Object","keys","map","key","index","length","jsort","join","pagination","option","action","data","salon_id","id","field","salon_field","post","headers","taxApiController"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,MAAMC,OAAO,GAAGF,MAAM,CAACE,OAAvB;;AAEA,MAAMC,IAAI,GAAIC,MAAD,IAAY;AACvB,QAAMC,IAAI,GAAGN,KAAK,CAACO,QAAN,GAAiBD,IAA9B;AACA,QAAME,QAAQ,GAAGF,IAAI,CAACG,IAAL,CAAUD,QAA3B;AACA,QAAME,IAAI,GAAGL,MAAM,IAAIA,MAAM,CAACK,IAA9B;AACA,QAAMC,IAAI,GAAGN,MAAM,IAAIA,MAAM,CAACM,IAA9B;AACA,QAAMC,aAAa,GAAGP,MAAM,IAAIA,MAAM,CAACO,aAAvC;AACA,QAAMC,MAAM,GAAGR,MAAM,IAAIA,MAAM,CAACQ,MAAjB,GAA0BR,MAAM,CAACQ,MAAjC,GAA0C,EAAzD;AACA,MAAIC,UAAU,GAAG,EAAjB;;AACA,MAAIJ,IAAJ,EAAU;AACR,QAAIK,SAAS,GAAG,EAAhB;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYP,IAAZ,EAAkBQ,GAAlB,CAAsB,UAAUC,GAAV,EAAeC,KAAf,EAAsB;AAC1CL,MAAAA,SAAS,CAACK,KAAD,CAAT,GAAoB,QAAOD,GAAI,KAAIT,IAAI,CAACS,GAAD,CAAM,EAA7C;AACD,KAFD;;AAGA,QAAIJ,SAAS,CAACM,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAIC,KAAK,GAAGP,SAAS,CAACQ,IAAV,CAAe,GAAf,CAAZ;AACAT,MAAAA,UAAU,GAAGQ,KAAb;AACD;AACF;;AACD,QAAME,UAAU,GAAGnB,MAAM,IAAIA,MAAM,CAACoB,MAAjB,GAA0B,KAA1B,GAAkC,IAArD;AACA,QAAMC,MAAM,GAAGf,IAAI,GAAI,4BAA2BA,IAAK,IAAGG,UAAW,EAAlD,GAAuD,uBAAsBA,UAAW,EAA3G;AACA,QAAMa,IAAI,GAAG;AACXnB,IAAAA,QAAQ,EAAEA,QADC;AAEXkB,IAAAA,MAAM,EAAEA,MAFG;AAGXE,IAAAA,QAAQ,EAAEtB,IAAI,CAACG,IAAL,CAAUmB,QAHT;AAIXJ,IAAAA,UAAU,EAAEnB,MAAM,IAAIA,MAAM,CAACwB,EAAjB,GAAsB,KAAtB,GAA8BL,UAJ/B;AAI2C;AACtDK,IAAAA,EAAE,EAAExB,MAAM,IAAIA,MAAM,CAACwB,EAAjB,GAAsBxB,MAAM,CAACwB,EAA7B,GAAkC,EAL3B;AAMXC,IAAAA,KAAK,EAAEzB,MAAM,IAAIA,MAAM,CAACwB,EAAjB,GAAsB,EAAtB,GAA2B,6BANvB;AAMsD;AACjEE,IAAAA,WAAW,EAAE,KAPF;AAOS;AACpBlB,IAAAA,MAAM,EAAEA,MARG;AAQK;AAChBY,IAAAA,MAAM,EAAEpB,MAAM,IAAIA,MAAM,CAACoB,MAAjB,GAA0BpB,MAAM,CAACoB,MAAjC,GAA0C;AATvC,GAAb;AAWA,SAAO1B,KAAK,CAACiC,IAAN,CAAWpB,aAAa,GAAI,GAAEA,aAAc,IAAGE,UAAW,EAAlC,GAAsCX,OAAO,GAAGuB,MAAxE,EAAgFC,IAAhF,EAAsF;AAAEM,IAAAA,OAAO,EAAE/B,UAAU;AAArB,GAAtF,CAAP;AACD,CAhCD;;AAkCA,MAAMgC,gBAAgB,GAAG;AACvB9B,EAAAA;AADuB,CAAzB;AAGA,eAAe8B,gBAAf","sourcesContent":["import axios from \"axios\";\nimport { store } from \"../store\";\nimport config from \"../config\";\nimport authHeader from \"./auth-header\";\n\nconst API_URL = config.API_URL;\n\nconst view = (values) => {\n  const auth = store.getState().auth;\n  const auth_key = auth.user.auth_key;\n  const sort = values && values.sort;\n  const page = values && values.page;\n  const next_page_url = values && values.next_page_url;\n  const result = values && values.result ? values.result : '';\n  let sortstring = \"\";\n  if (sort) {\n    let sortArray = [];\n    Object.keys(sort).map(function (key, index) {\n      sortArray[index] = `sort[${key}]=${sort[key]}`;\n    });\n    if (sortArray.length > 0) {\n      let jsort = sortArray.join(\"&\");\n      sortstring = jsort;\n    }\n  }\n  const pagination = values && values.option ? false : true;\n  const action = page ? `afterlogin/tax/view?page=${page}&${sortstring}` : `afterlogin/tax/view?${sortstring}`;\n  const data = {\n    auth_key: auth_key,\n    action: action,\n    salon_id: auth.user.salon_id,\n    pagination: values && values.id ? false : pagination, //true or false\n    id: values && values.id ? values.id : \"\",\n    field: values && values.id ? \"\" : \"name,description,percentage\", // first_name,last_name,email\n    salon_field: false, //business_name,owner_name\n    result: result, //business_name,owner_name\n    option: values && values.option ? values.option : ''\n  };\n  return axios.post(next_page_url ? `${next_page_url}&${sortstring}` : API_URL + action, data, { headers: authHeader() });\n};\n\nconst taxApiController = {\n  view\n};\nexport default taxApiController;\n"]},"metadata":{},"sourceType":"module"}