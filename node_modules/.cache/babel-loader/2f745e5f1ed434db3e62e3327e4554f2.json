{"ast":null,"code":"import React from \"react\";\nimport Unauthorized from \"./Unauthorized\";\n\nconst HandleError = (thunkAPI, error, type) => {\n  if (error.response && error.response.status == 422) {\n    const messages = error.response && error.response.data && error.response.data || error.message || error.toString();\n    return thunkAPI.rejectWithValue({\n      status: error.response.status,\n      message: messages\n    });\n  } else if (error.response.status == 401) {\n    Unauthorized(thunkAPI);\n  } else if (error.response == undefined) {\n    Unauthorized(thunkAPI);\n  }\n\n  return thunkAPI.rejectWithValue({\n    status: error.response.status\n  });\n};\n\n_c = HandleError;\nexport default HandleError;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandleError\");","map":{"version":3,"sources":["/opt/lampp/htdocs/git/salonreact/src/store/HandleError.js"],"names":["React","Unauthorized","HandleError","thunkAPI","error","type","response","status","messages","data","message","toString","rejectWithValue","undefined"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,WAAW,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkBC,IAAlB,KAA2B;AAC7C,MAAID,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeC,MAAf,IAAyB,GAA/C,EAAoD;AAClD,UAAMC,QAAQ,GAAIJ,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeG,IAAjC,IAAyCL,KAAK,CAACE,QAAN,CAAeG,IAAzD,IAAkEL,KAAK,CAACM,OAAxE,IAAmFN,KAAK,CAACO,QAAN,EAApG;AACA,WAAOR,QAAQ,CAACS,eAAT,CAAyB;AAAEL,MAAAA,MAAM,EAAEH,KAAK,CAACE,QAAN,CAAeC,MAAzB;AAAiCG,MAAAA,OAAO,EAAEF;AAA1C,KAAzB,CAAP;AACD,GAHD,MAGO,IAAIJ,KAAK,CAACE,QAAN,CAAeC,MAAf,IAAyB,GAA7B,EAAkC;AACvCN,IAAAA,YAAY,CAACE,QAAD,CAAZ;AACD,GAFM,MAEA,IAAGC,KAAK,CAACE,QAAN,IAAkBO,SAArB,EAA+B;AACpCZ,IAAAA,YAAY,CAACE,QAAD,CAAZ;AACD;;AACD,SAAOA,QAAQ,CAACS,eAAT,CAAyB;AAAEL,IAAAA,MAAM,EAAEH,KAAK,CAACE,QAAN,CAAeC;AAAzB,GAAzB,CAAP;AACD,CAVD;;KAAML,W;AAYN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\nimport Unauthorized from \"./Unauthorized\";\n\nconst HandleError = (thunkAPI, error, type) => {\n  if (error.response && error.response.status == 422) {\n    const messages = (error.response && error.response.data && error.response.data) || error.message || error.toString();\n    return thunkAPI.rejectWithValue({ status: error.response.status, message: messages });\n  } else if (error.response.status == 401) {\n    Unauthorized(thunkAPI);\n  } else if(error.response == undefined){\n    Unauthorized(thunkAPI);\n  }\n  return thunkAPI.rejectWithValue({ status: error.response.status });\n};\n\nexport default HandleError;\n"]},"metadata":{},"sourceType":"module"}