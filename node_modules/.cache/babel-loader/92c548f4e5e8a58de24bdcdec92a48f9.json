{"ast":null,"code":"import axios from \"axios\";\nimport { store } from \"../store\";\nimport config from \"../config\";\nimport authHeader from \"./auth-header\";\nconst API_URL = config.API_URL;\n\nconst register = (username, email, password) => {\n  return axios.post(API_URL + \"signup\", {\n    username,\n    email,\n    password\n  });\n};\n\nconst login = (email, password, remember_me) => {\n  return axios.post(API_URL + \"login\", {\n    action: \"login\",\n    email,\n    password,\n    remember_me\n  }).then(response => {\n    if (response.status == 200) {\n      return response.data;\n    }\n  });\n};\n\nconst logout = () => {\n  const auth = store.getState().auth;\n  const auth_key = auth.user.auth_key;\n  return axios.post(API_URL + \"afterlogin/logout\", {\n    action: \"logout\",\n    auth_key\n  }, {\n    headers: authHeader()\n  }).then(response => {\n    if (response.status == 200) {\n      return response.data;\n    }\n  }); // localStorage.removeItem(\"user\");\n  // const navigate = useNavigate();\n  // navigate(\"/login\");\n};\n\nconst getUser = authenticate => {\n  const token = authenticate.token;\n  const auth_key = authenticate.auth_key;\n  const action = \"afterlogin/user\";\n  return axios.post(API_URL + action, {\n    action: \"afterlogin/user\",\n    auth_key\n  }, {\n    headers: authHeader({\n      token: token\n    })\n  }).then(response => {\n    if (response.status == 200) {\n      return response.data;\n    }\n  });\n};\n\nconst authService = {\n  register,\n  login,\n  logout,\n  getUser\n};\nexport default authService;","map":{"version":3,"sources":["/opt/lampp/htdocs/git/salonreact/src/services/auth.service.js"],"names":["axios","store","config","authHeader","API_URL","register","username","email","password","post","login","remember_me","action","then","response","status","data","logout","auth","getState","auth_key","user","headers","getUser","authenticate","token","authService"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,MAAMC,OAAO,GAAGF,MAAM,CAACE,OAAvB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkBC,QAAlB,KAA+B;AAC9C,SAAOR,KAAK,CAACS,IAAN,CAAWL,OAAO,GAAG,QAArB,EAA+B;AACpCE,IAAAA,QADoC;AAEpCC,IAAAA,KAFoC;AAGpCC,IAAAA;AAHoC,GAA/B,CAAP;AAKD,CAND;;AAQA,MAAME,KAAK,GAAG,CAACH,KAAD,EAAQC,QAAR,EAAkBG,WAAlB,KAAkC;AAC9C,SAAOX,KAAK,CACTS,IADI,CACCL,OAAO,GAAG,OADX,EACoB;AACvBQ,IAAAA,MAAM,EAAE,OADe;AAEvBL,IAAAA,KAFuB;AAGvBC,IAAAA,QAHuB;AAIvBG,IAAAA;AAJuB,GADpB,EAOJE,IAPI,CAOEC,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,aAAOD,QAAQ,CAACE,IAAhB;AACD;AACF,GAXI,CAAP;AAYD,CAbD;;AAeA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAMC,IAAI,GAAGjB,KAAK,CAACkB,QAAN,GAAiBD,IAA9B;AACA,QAAME,QAAQ,GAAGF,IAAI,CAACG,IAAL,CAAUD,QAA3B;AACA,SAAOpB,KAAK,CACTS,IADI,CAEHL,OAAO,GAAG,mBAFP,EAGH;AACEQ,IAAAA,MAAM,EAAE,QADV;AAEEQ,IAAAA;AAFF,GAHG,EAOH;AAAEE,IAAAA,OAAO,EAAEnB,UAAU;AAArB,GAPG,EASJU,IATI,CASEC,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,aAAOD,QAAQ,CAACE,IAAhB;AACD;AACF,GAbI,CAAP,CAHmB,CAiBnB;AACA;AACA;AACD,CApBD;;AAsBA,MAAMO,OAAO,GAAIC,YAAD,IAAkB;AAChC,QAAMC,KAAK,GAAGD,YAAY,CAACC,KAA3B;AACA,QAAML,QAAQ,GAAGI,YAAY,CAACJ,QAA9B;AACA,QAAMR,MAAM,GAAG,iBAAf;AACA,SAAOZ,KAAK,CACTS,IADI,CAEHL,OAAO,GAAGQ,MAFP,EAGH;AACEA,IAAAA,MAAM,EAAE,iBADV;AAEEQ,IAAAA;AAFF,GAHG,EAOH;AAAEE,IAAAA,OAAO,EAAEnB,UAAU,CAAC;AAACsB,MAAAA,KAAK,EAACA;AAAP,KAAD;AAArB,GAPG,EASJZ,IATI,CASEC,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,aAAOD,QAAQ,CAACE,IAAhB;AACD;AACF,GAbI,CAAP;AAcD,CAlBD;;AAoBA,MAAMU,WAAW,GAAG;AAClBrB,EAAAA,QADkB;AAElBK,EAAAA,KAFkB;AAGlBO,EAAAA,MAHkB;AAIlBM,EAAAA;AAJkB,CAApB;AAMA,eAAeG,WAAf","sourcesContent":["import axios from \"axios\";\nimport { store } from \"../store\";\nimport config from \"../config\";\nimport authHeader from \"./auth-header\";\n\nconst API_URL = config.API_URL;\n\nconst register = (username, email, password) => {\n  return axios.post(API_URL + \"signup\", {\n    username,\n    email,\n    password,\n  });\n};\n\nconst login = (email, password, remember_me) => {\n  return axios\n    .post(API_URL + \"login\", {\n      action: \"login\",\n      email,\n      password,\n      remember_me,\n    })\n    .then((response) => {\n      if (response.status == 200) {\n        return response.data;\n      }\n    });\n};\n\nconst logout = () => {\n  const auth = store.getState().auth;\n  const auth_key = auth.user.auth_key;\n  return axios\n    .post(\n      API_URL + \"afterlogin/logout\",\n      {\n        action: \"logout\",\n        auth_key,\n      },\n      { headers: authHeader() },\n    )\n    .then((response) => {\n      if (response.status == 200) {\n        return response.data;\n      }\n    });\n  // localStorage.removeItem(\"user\");\n  // const navigate = useNavigate();\n  // navigate(\"/login\");\n};\n\nconst getUser = (authenticate) => {\n  const token = authenticate.token;\n  const auth_key = authenticate.auth_key;\n  const action = \"afterlogin/user\";\n  return axios\n    .post(\n      API_URL + action,\n      {\n        action: \"afterlogin/user\",\n        auth_key,\n      },\n      { headers: authHeader({token:token}) },\n    )\n    .then((response) => {\n      if (response.status == 200) {\n        return response.data;\n      }\n    });\n};\n\nconst authService = {\n  register,\n  login,\n  logout,\n  getUser,\n};\nexport default authService;\n"]},"metadata":{},"sourceType":"module"}