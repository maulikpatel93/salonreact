{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/git/salonreact/src/pages/services/categories/CategoryAddForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\"; // validation Formik\n\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport config from \"../../../config\";\nimport yupconfig from \"../../../yupconfig\";\nimport { InputField, MapAddressField, InputFieldImage } from \"../../../component/form/Field\";\nimport { sweatalert } from \"../../../component/Sweatalert2\"; // import { closeNewCategoryForm } from \"../../../store/slices/categorySlice\";\n\nimport { closeAddCategoryForm, categoryStoreApi } from \"../../../store/slices/categorySlice\";\nimport { removeImage } from \"../../../store/slices/imageSlice\";\nimport useScriptRef from \"../../../hooks/useScriptRef\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CategoryAddForm = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const rightDrawerOpened = useSelector(state => state.category.isOpenedAddForm);\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useDispatch();\n  const scriptedRef = useScriptRef();\n\n  const handleCloseAddCategoryForm = () => {\n    dispatch(closeAddCategoryForm());\n    dispatch({\n      type: 'category/detail/rejected'\n    });\n  };\n\n  const initialValues = {\n    name: \"\"\n  };\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().trim().max(100).label(t(\"category_name\")).required()\n  });\n  yupconfig();\n\n  const handlecategoriesubmit = (values, _ref) => {\n    let {\n      setErrors,\n      setStatus,\n      setSubmitting,\n      resetForm\n    } = _ref;\n    setLoading(true);\n\n    try {\n      dispatch(categoryStoreApi(values)).then(action => {\n        if (action.meta.requestStatus == \"fulfilled\") {\n          setStatus({\n            success: true\n          });\n          resetForm();\n          dispatch(removeImage());\n          dispatch(closeAddCategoryForm());\n          sweatalert({\n            title: t(\"created\"),\n            text: t(\"created_successfully\"),\n            icon: \"success\"\n          });\n        } else if (action.meta.requestStatus == \"rejected\") {\n          const status = action.payload && action.payload.status;\n          const errors = action.payload && action.payload.message && action.payload.message.errors;\n\n          if (status == 422) {\n            setErrors(errors);\n          }\n\n          setStatus({\n            success: false\n          });\n          setSubmitting(false);\n        }\n      });\n\n      if (scriptedRef.current) {\n        setLoading(false);\n      }\n    } catch (err) {\n      if (scriptedRef.current) {\n        setErrors(err.message);\n      }\n\n      setStatus({\n        success: false\n      });\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: false,\n      initialValues: initialValues,\n      validationSchema: validationSchema,\n      onSubmit: handlecategoriesubmit,\n      children: formik => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: rightDrawerOpened ? \"modal fade show\" : \"modal fade\",\n          id: \"add-category\",\n          tabIndex: \"-1\",\n          \"aria-labelledby\": \"addcategoryModalLabel\",\n          \"aria-hidden\": \"true\",\n          style: {\n            display: rightDrawerOpened ? \"block\" : \"none\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-dialog modal-dialog-centered\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-content \",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"close me-md-4 me-3 mt-md-4 mt-3\",\n                onClick: handleCloseAddCategoryForm,\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: config.imagepath + \"close-icon.svg\",\n                  alt: \"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"modal-body p-md-4 p-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"mb-2\",\n                  children: t('add_category')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                  noValidate: true,\n                  onSubmit: formik.handleSubmit,\n                  children: [/*#__PURE__*/_jsxDEV(InputField, {\n                    type: \"text\",\n                    name: \"name\",\n                    value: formik.values.name,\n                    label: t(\"category_name\"),\n                    controlId: \"categoryForm-name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 85,\n                    columnNumber: 33\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-center\",\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      type: \"submit\",\n                      className: \"btn\",\n                      children: t(\"save\")\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 87,\n                      columnNumber: 37\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 86,\n                    columnNumber: 33\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CategoryAddForm, \"OPyNG7UeLT7KEuwqUqIRUqMOIxo=\", false, function () {\n  return [useSelector, useTranslation, useDispatch, useScriptRef];\n});\n\n_c = CategoryAddForm;\nexport default CategoryAddForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryAddForm\");","map":{"version":3,"sources":["/opt/lampp/htdocs/git/salonreact/src/pages/services/categories/CategoryAddForm.js"],"names":["React","useState","useDispatch","useSelector","useTranslation","Yup","Formik","config","yupconfig","InputField","MapAddressField","InputFieldImage","sweatalert","closeAddCategoryForm","categoryStoreApi","removeImage","useScriptRef","CategoryAddForm","loading","setLoading","rightDrawerOpened","state","category","isOpenedAddForm","t","dispatch","scriptedRef","handleCloseAddCategoryForm","type","initialValues","name","validationSchema","object","shape","string","trim","max","label","required","handlecategoriesubmit","values","setErrors","setStatus","setSubmitting","resetForm","then","action","meta","requestStatus","success","title","text","icon","status","payload","errors","message","current","err","formik","display","imagepath","handleSubmit"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\n// validation Formik\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport config from \"../../../config\";\nimport yupconfig from \"../../../yupconfig\";\nimport { InputField, MapAddressField, InputFieldImage } from \"../../../component/form/Field\";\nimport { sweatalert } from \"../../../component/Sweatalert2\";\n\n// import { closeNewCategoryForm } from \"../../../store/slices/categorySlice\";\nimport { closeAddCategoryForm, categoryStoreApi } from \"../../../store/slices/categorySlice\";\nimport { removeImage } from \"../../../store/slices/imageSlice\";\nimport useScriptRef from \"../../../hooks/useScriptRef\";\n\nconst CategoryAddForm = () => {\n  const [loading, setLoading] = useState(false);\n  const rightDrawerOpened = useSelector((state) => state.category.isOpenedAddForm);\n\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const scriptedRef = useScriptRef();\n\n  const handleCloseAddCategoryForm = () => {\n    dispatch(closeAddCategoryForm());\n    dispatch({type:'category/detail/rejected'});\n  };\n\n  const initialValues = {\n    name: \"\"\n  };\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().trim().max(100).label(t(\"category_name\")).required()\n  });\n  yupconfig();\n\n  const handlecategoriesubmit = (values, { setErrors, setStatus, setSubmitting, resetForm }) => {\n    setLoading(true);\n    try {\n      dispatch(categoryStoreApi(values)).then((action) => {\n        if (action.meta.requestStatus == \"fulfilled\") {\n          setStatus({ success: true });\n          resetForm();\n          dispatch(removeImage());\n          dispatch(closeAddCategoryForm());\n          sweatalert({ title: t(\"created\"), text: t(\"created_successfully\"), icon: \"success\" });\n        } else if (action.meta.requestStatus == \"rejected\") {\n          const status = action.payload && action.payload.status;\n          const errors = action.payload && action.payload.message && action.payload.message.errors;\n          if (status == 422) {\n            setErrors(errors);\n          }\n          setStatus({ success: false });\n          setSubmitting(false);\n        }\n      });\n      if (scriptedRef.current) {\n        setLoading(false);\n      }\n    } catch (err) {\n      if (scriptedRef.current) {\n        setErrors(err.message);\n      }\n      setStatus({ success: false });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Formik enableReinitialize={false} initialValues={initialValues} validationSchema={validationSchema} onSubmit={handlecategoriesubmit}>\n      {(formik) => {\n          return (\n            <div className={rightDrawerOpened ? \"modal fade show\" : \"modal fade\"} id=\"add-category\" tabIndex=\"-1\" aria-labelledby=\"addcategoryModalLabel\" aria-hidden=\"true\" style={{ display : rightDrawerOpened ? \"block\" : \"none\" }}>\n                <div className=\"modal-dialog modal-dialog-centered\">\n                    <div className=\"modal-content \">\n                        <button type=\"button\" className=\"close me-md-4 me-3 mt-md-4 mt-3\" onClick={handleCloseAddCategoryForm}>\n                            <img src={ config.imagepath + \"close-icon.svg\"} alt=\"\"/>\n                        </button>\n                        <div className=\"modal-body p-md-4 p-3\">\n                            <h4 className=\"mb-2\">{t('add_category')}</h4>\n                            <form noValidate onSubmit={formik.handleSubmit}>\n                                <InputField type=\"text\" name=\"name\" value={formik.values.name} label={t(\"category_name\")} controlId=\"categoryForm-name\" />\n                                <div className=\"text-center\">\n                                    <button type=\"submit\" className=\"btn\">\n                                      {t(\"save\")}\n                                    </button>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n          );\n        }}\n      </Formik>\n    </React.Fragment>\n  );\n};\n\nexport default CategoryAddForm;\n"]},"metadata":{},"sourceType":"module"}