{"ast":null,"code":"import { createSlice, createAsyncThunk, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport taxApiController from \"../../services/tax.service\";\nimport HandleError from \"../HandleError\";\nimport HandleResponse from \"../HandleResponse\";\nexport const usersAdapter = createEntityAdapter();\nexport const taxOptions = createAsyncThunk(\"tax/taxOptions\", async (formValues, thunkAPI) => {\n  try {\n    const resposedata = await taxApiController.view(formValues, thunkAPI).then(response => HandleResponse(thunkAPI, response, 'taxOptions')).catch(error => HandleError(thunkAPI, error, 'taxOptions'));\n    return resposedata;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue();\n  }\n});\nconst initialState = {\n  isTaxOption: []\n};\nexport const taxSlice = createSlice({\n  name: \"tax\",\n  initialState,\n  reducers: {\n    reset: () => initialState\n  },\n  extraReducers: {\n    [taxOptions.pending]: (state, action) => {},\n    [taxOptions.fulfilled]: (state, action) => {\n      state.isTaxOption = action.payload;\n    },\n    [taxOptions.rejected]: (state, action) => {\n      state.isTaxOption = [];\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  reset\n} = taxSlice.actions;\nexport default taxSlice.reducer;","map":{"version":3,"sources":["/opt/lampp/htdocs/git/salonreact/src/store/slices/taxSlice.js"],"names":["createSlice","createAsyncThunk","createEntityAdapter","taxApiController","HandleError","HandleResponse","usersAdapter","taxOptions","formValues","thunkAPI","resposedata","view","then","response","catch","error","message","data","toString","rejectWithValue","initialState","isTaxOption","taxSlice","name","reducers","reset","extraReducers","pending","state","action","fulfilled","payload","rejected","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,EAAwCC,mBAAxC,QAAmE,kBAAnE;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AAEA,OAAO,MAAMC,YAAY,GAAGJ,mBAAmB,EAAxC;AAEP,OAAO,MAAMK,UAAU,GAAGN,gBAAgB,CAAC,gBAAD,EAAmB,OAAOO,UAAP,EAAmBC,QAAnB,KAAgC;AAC3F,MAAI;AACF,UAAMC,WAAW,GAAG,MAAMP,gBAAgB,CACvCQ,IADuB,CAClBH,UADkB,EACNC,QADM,EAEvBG,IAFuB,CAEjBC,QAAD,IAAcR,cAAc,CAACI,QAAD,EAAWI,QAAX,EAAqB,YAArB,CAFV,EAGvBC,KAHuB,CAGhBC,KAAD,IAAWX,WAAW,CAACK,QAAD,EAAWM,KAAX,EAAkB,YAAlB,CAHL,CAA1B;AAIA,WAAOL,WAAP;AACD,GAND,CAME,OAAOK,KAAP,EAAc;AACd,UAAMC,OAAO,GAAID,KAAK,CAACF,QAAN,IAAkBE,KAAK,CAACF,QAAN,CAAeI,IAAjC,IAAyCF,KAAK,CAACF,QAAN,CAAeI,IAAf,CAAoBD,OAA9D,IAA0ED,KAAK,CAACC,OAAhF,IAA2FD,KAAK,CAACG,QAAN,EAA3G;AACA,WAAOT,QAAQ,CAACU,eAAT,EAAP;AACD;AACF,CAXyC,CAAnC;AAaP,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE;AADM,CAArB;AAIA,OAAO,MAAMC,QAAQ,GAAGtB,WAAW,CAAC;AAClCuB,EAAAA,IAAI,EAAE,KAD4B;AAElCH,EAAAA,YAFkC;AAGlCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,MAAML;AADL,GAHwB;AAMlCM,EAAAA,aAAa,EAAE;AACb,KAACnB,UAAU,CAACoB,OAAZ,GAAsB,CAACC,KAAD,EAAQC,MAAR,KAAmB,CAAE,CAD9B;AAEb,KAACtB,UAAU,CAACuB,SAAZ,GAAwB,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACzCD,MAAAA,KAAK,CAACP,WAAN,GAAoBQ,MAAM,CAACE,OAA3B;AACD,KAJY;AAKb,KAACxB,UAAU,CAACyB,QAAZ,GAAuB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACP,WAAN,GAAoB,EAApB;AACD;AAPY;AANmB,CAAD,CAA5B,C,CAgBP;;AACA,OAAO,MAAM;AAAEI,EAAAA;AAAF,IAAYH,QAAQ,CAACW,OAA3B;AACP,eAAeX,QAAQ,CAACY,OAAxB","sourcesContent":["import { createSlice, createAsyncThunk, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport taxApiController from \"../../services/tax.service\";\nimport HandleError from \"../HandleError\";\nimport HandleResponse from \"../HandleResponse\";\n\nexport const usersAdapter = createEntityAdapter();\n\nexport const taxOptions = createAsyncThunk(\"tax/taxOptions\", async (formValues, thunkAPI) => {\n  try {\n    const resposedata = await taxApiController\n      .view(formValues, thunkAPI)\n      .then((response) => HandleResponse(thunkAPI, response, 'taxOptions'))\n      .catch((error) => HandleError(thunkAPI, error, 'taxOptions'));\n    return resposedata;\n  } catch (error) {\n    const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString();\n    return thunkAPI.rejectWithValue();\n  }\n});\n\nconst initialState = {\n  isTaxOption: [],\n};\n\nexport const taxSlice = createSlice({\n  name: \"tax\",\n  initialState,\n  reducers: {\n    reset: () => initialState\n  },\n  extraReducers: {\n    [taxOptions.pending]: (state, action) => {},\n    [taxOptions.fulfilled]: (state, action) => {\n      state.isTaxOption = action.payload;\n    },\n    [taxOptions.rejected]: (state, action) => {\n      state.isTaxOption = [];\n    },\n  },\n});\n// Action creators are generated for each case reducer function\nexport const { reset } = taxSlice.actions;\nexport default taxSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}