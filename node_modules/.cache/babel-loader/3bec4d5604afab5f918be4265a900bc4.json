{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { setMessage } from \"./message\";\nimport AuthService from \"../../services/auth.service\";\nexport const register = createAsyncThunk(\"auth/register\", async (_ref, thunkAPI) => {\n  let {\n    username,\n    email,\n    password\n  } = _ref;\n\n  try {\n    const response = await AuthService.register(username, email, password);\n    thunkAPI.dispatch(setMessage(response.data.message));\n    return response.data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    thunkAPI.dispatch(setMessage(message));\n    return thunkAPI.rejectWithValue();\n  }\n});\nexport const login = createAsyncThunk(\"auth/login\", async (_ref2, thunkAPI) => {\n  let {\n    email,\n    password,\n    remember_me\n  } = _ref2;\n\n  try {\n    const resposedata = await AuthService.login(email, password, remember_me, thunkAPI);\n    return {\n      isLoggedIn: true,\n      user: await AuthService.getUser({\n        auth_key: resposedata.auth_key,\n        token: resposedata.token\n      }),\n      token: resposedata.token\n    };\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    thunkAPI.dispatch(setMessage(message));\n    return thunkAPI.rejectWithValue();\n  }\n});\nexport const logout = createAsyncThunk(\"auth/logout\", async thunkAPI => {\n  try {\n    const resposedata = await AuthService.logout();\n    return resposedata;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    thunkAPI.dispatch(setMessage(message));\n    return thunkAPI.rejectWithValue();\n  }\n});\nconst initialState = {\n  token: \"\",\n  isLoggedIn: false,\n  isInitialized: false,\n  user: null\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  extraReducers: {\n    [register.fulfilled]: (state, action) => {\n      state.isLoggedIn = false;\n    },\n    [register.rejected]: (state, action) => {\n      state.isLoggedIn = false;\n    },\n    [login.fulfilled]: (state, action) => {\n      state.isLoggedIn = true;\n      state.token = action.payload.token;\n      state.user = action.payload.user;\n      state.isInitialized = true;\n    },\n    [login.rejected]: (state, action) => {\n      state.isLoggedIn = false;\n      state.token = \"\";\n      state.user = null;\n    },\n    [logout.fulfilled]: (state, action) => {\n      state.isLoggedIn = false;\n      state.token = \"\";\n      state.user = null;\n    }\n  }\n});\nconst {\n  reducer\n} = authSlice;\nexport default reducer;","map":{"version":3,"sources":["/opt/lampp/htdocs/git/salonreact/src/store/slices/auth.js"],"names":["createSlice","createAsyncThunk","setMessage","AuthService","register","thunkAPI","username","email","password","response","dispatch","data","message","error","toString","rejectWithValue","login","remember_me","resposedata","isLoggedIn","user","getUser","auth_key","token","logout","initialState","isInitialized","authSlice","name","extraReducers","fulfilled","state","action","rejected","payload","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { setMessage } from \"./message\";\n\nimport AuthService from \"../../services/auth.service\";\n\nexport const register = createAsyncThunk(\"auth/register\", async ({ username, email, password }, thunkAPI) => {\n  try {\n    const response = await AuthService.register(username, email, password);\n    thunkAPI.dispatch(setMessage(response.data.message));\n    return response.data;\n  } catch (error) {\n    const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString();\n    thunkAPI.dispatch(setMessage(message));\n    return thunkAPI.rejectWithValue();\n  }\n});\n\nexport const login = createAsyncThunk(\"auth/login\", async ({ email, password, remember_me }, thunkAPI) => {\n  try {\n    const resposedata = await AuthService.login(email, password, remember_me, thunkAPI);\n    return { isLoggedIn: true, user: await AuthService.getUser({ auth_key:resposedata.auth_key, token:resposedata.token}), token: resposedata.token };\n  } catch (error) {\n    const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString();\n    thunkAPI.dispatch(setMessage(message));\n    return thunkAPI.rejectWithValue();\n  }\n});\n\nexport const logout = createAsyncThunk(\"auth/logout\", async (thunkAPI) => {\n  try {\n    const resposedata = await AuthService.logout();\n    return resposedata;\n  } catch (error) {\n    const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString();\n    thunkAPI.dispatch(setMessage(message));\n    return thunkAPI.rejectWithValue();\n  }\n});\n\nconst initialState = {\n  token: \"\",\n  isLoggedIn: false,\n  isInitialized: false,\n  user: null,\n};\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  extraReducers: {\n    [register.fulfilled]: (state, action) => {\n      state.isLoggedIn = false;\n    },\n    [register.rejected]: (state, action) => {\n      state.isLoggedIn = false;\n    },\n    [login.fulfilled]: (state, action) => {\n      state.isLoggedIn = true;\n      state.token = action.payload.token;\n      state.user = action.payload.user;\n      state.isInitialized = true;\n    },\n    [login.rejected]: (state, action) => {\n      state.isLoggedIn = false;\n      state.token = \"\";\n      state.user = null;\n    },\n    [logout.fulfilled]: (state, action) => {\n      state.isLoggedIn = false;\n      state.token = \"\";\n      state.user = null;\n    },\n  },\n});\n\nconst { reducer } = authSlice;\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}