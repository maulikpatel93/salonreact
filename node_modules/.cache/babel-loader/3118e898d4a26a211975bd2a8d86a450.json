{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import { setLocale } from \"yup\";\nimport { useTranslation } from \"react-i18next\";\nimport * as Yup from \"yup\";\n\nconst YupLocale = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  Yup.setLocale({\n    mixed: {\n      default: t(\"mixed.default\"),\n      required: t(\"mixed.required\"),\n      oneOf: t(\"mixed.oneOf\"),\n      notOneOf: t(\"mixed.notOneOf\"),\n      defined: t(\"mixed.defined\"),\n      string: {\n        length: t(\"mixed.string.length\"),\n        min: t(\"mixed.string.min\"),\n        max: t(\"mixed.string.max\"),\n        matches: t('mixed.string.matches'),\n        email: t(\"mixed.string.email\"),\n        url: t(\"mixed.string.url\"),\n        uuid: t(\"mixed.string.uuid\"),\n        trim: t(\"mixed.string.trim\"),\n        lowercase: t(\"mixed.string.lowercase\"),\n        uppercase: t(\"mixed.string.uppercase\")\n      },\n      number: {\n        min: t(\"mixed.number.min\"),\n        max: t(\"mixed.number.max\"),\n        lessThan: t(\"mixed.number.lessThan\"),\n        moreThan: t(\"mixed.number.moreThan\"),\n        positive: t(\"mixed.number.positive\"),\n        negative: t(\"mixed.number.negative\"),\n        integer: t(\"mixed.number.integer\")\n      },\n      date: {\n        min: t(\"mixed.date.min\"),\n        max: t(\"mixed.date.max\")\n      },\n      boolean: {\n        isValue: t(\"mixed.boolean.isValue\")\n      },\n      object: {\n        noUnknown: t(\"mixed.object.noUnknown\")\n      },\n      array: {\n        min: t(\"mixed.array.min\"),\n        max: t(\"mixed.array.max\"),\n        length: t(\"mixed.array.length\")\n      }\n    }\n  });\n};\n\n_s(YupLocale, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = YupLocale;\nexport default YupLocale;\n\nvar _c;\n\n$RefreshReg$(_c, \"YupLocale\");","map":{"version":3,"sources":["/opt/lampp/htdocs/git/salonreact/src/yupconfig.js"],"names":["useTranslation","Yup","YupLocale","t","setLocale","mixed","default","required","oneOf","notOneOf","defined","string","length","min","max","matches","email","url","uuid","trim","lowercase","uppercase","number","lessThan","moreThan","positive","negative","integer","date","boolean","isValue","object","noUnknown","array"],"mappings":";;AAAA;AACA,SAASA,cAAT,QAA+B,eAA/B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAQH,cAAc,EAA5B;AAEAC,EAAAA,GAAG,CAACG,SAAJ,CAAc;AACZC,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEH,CAAC,CAAC,eAAD,CADL;AAELI,MAAAA,QAAQ,EAAEJ,CAAC,CAAC,gBAAD,CAFN;AAGLK,MAAAA,KAAK,EAAEL,CAAC,CAAC,aAAD,CAHH;AAILM,MAAAA,QAAQ,EAAEN,CAAC,CAAC,gBAAD,CAJN;AAKLO,MAAAA,OAAO,EAAEP,CAAC,CAAC,eAAD,CALL;AAMLQ,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAET,CAAC,CAAC,qBAAD,CADH;AAENU,QAAAA,GAAG,EAAEV,CAAC,CAAC,kBAAD,CAFA;AAGNW,QAAAA,GAAG,EAAEX,CAAC,CAAC,kBAAD,CAHA;AAINY,QAAAA,OAAO,EAAEZ,CAAC,CAAC,sBAAD,CAJJ;AAKNa,QAAAA,KAAK,EAAEb,CAAC,CAAC,oBAAD,CALF;AAMNc,QAAAA,GAAG,EAAEd,CAAC,CAAC,kBAAD,CANA;AAONe,QAAAA,IAAI,EAAEf,CAAC,CAAC,mBAAD,CAPD;AAQNgB,QAAAA,IAAI,EAAEhB,CAAC,CAAC,mBAAD,CARD;AASNiB,QAAAA,SAAS,EAAEjB,CAAC,CAAC,wBAAD,CATN;AAUNkB,QAAAA,SAAS,EAAElB,CAAC,CAAC,wBAAD;AAVN,OANH;AAkBLmB,MAAAA,MAAM,EAAE;AACNT,QAAAA,GAAG,EAAEV,CAAC,CAAC,kBAAD,CADA;AAENW,QAAAA,GAAG,EAAEX,CAAC,CAAC,kBAAD,CAFA;AAGNoB,QAAAA,QAAQ,EAAEpB,CAAC,CAAC,uBAAD,CAHL;AAINqB,QAAAA,QAAQ,EAAErB,CAAC,CAAC,uBAAD,CAJL;AAKNsB,QAAAA,QAAQ,EAAEtB,CAAC,CAAC,uBAAD,CALL;AAMNuB,QAAAA,QAAQ,EAAEvB,CAAC,CAAC,uBAAD,CANL;AAONwB,QAAAA,OAAO,EAAExB,CAAC,CAAC,sBAAD;AAPJ,OAlBH;AA2BLyB,MAAAA,IAAI,EAAE;AACJf,QAAAA,GAAG,EAAEV,CAAC,CAAC,gBAAD,CADF;AAEJW,QAAAA,GAAG,EAAEX,CAAC,CAAC,gBAAD;AAFF,OA3BD;AA+BL0B,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE3B,CAAC,CAAC,uBAAD;AADH,OA/BJ;AAkCL4B,MAAAA,MAAM,EAAE;AACNC,QAAAA,SAAS,EAAE7B,CAAC,CAAC,wBAAD;AADN,OAlCH;AAqCL8B,MAAAA,KAAK,EAAE;AACLpB,QAAAA,GAAG,EAAEV,CAAC,CAAC,iBAAD,CADD;AAELW,QAAAA,GAAG,EAAEX,CAAC,CAAC,iBAAD,CAFD;AAGLS,QAAAA,MAAM,EAAET,CAAC,CAAC,oBAAD;AAHJ;AArCF;AADK,GAAd;AA6CD,CAhDD;;GAAMD,S;UACUF,c;;;KADVE,S;AAkDN,eAAeA,SAAf","sourcesContent":["// import { setLocale } from \"yup\";\nimport { useTranslation } from \"react-i18next\";\nimport * as Yup from \"yup\";\n\nconst YupLocale = () => {\n  const { t } = useTranslation();\n\n  Yup.setLocale({\n    mixed: {\n      default: t(\"mixed.default\"),\n      required: t(\"mixed.required\"),\n      oneOf: t(\"mixed.oneOf\"),\n      notOneOf: t(\"mixed.notOneOf\"),\n      defined: t(\"mixed.defined\"),\n      string: {\n        length: t(\"mixed.string.length\"),\n        min: t(\"mixed.string.min\"),\n        max: t(\"mixed.string.max\"),\n        matches: t('mixed.string.matches'),\n        email: t(\"mixed.string.email\"),\n        url: t(\"mixed.string.url\"),\n        uuid: t(\"mixed.string.uuid\"),\n        trim: t(\"mixed.string.trim\"),\n        lowercase: t(\"mixed.string.lowercase\"),\n        uppercase: t(\"mixed.string.uppercase\"),\n      },\n      number: {\n        min: t(\"mixed.number.min\"),\n        max: t(\"mixed.number.max\"),\n        lessThan: t(\"mixed.number.lessThan\"),\n        moreThan: t(\"mixed.number.moreThan\"),\n        positive: t(\"mixed.number.positive\"),\n        negative: t(\"mixed.number.negative\"),\n        integer: t(\"mixed.number.integer\"),\n      },\n      date: {\n        min: t(\"mixed.date.min\"),\n        max: t(\"mixed.date.max\"),\n      },\n      boolean: {\n        isValue: t(\"mixed.boolean.isValue\"),\n      },\n      object: {\n        noUnknown: t(\"mixed.object.noUnknown\"),\n      },\n      array: {\n        min: t(\"mixed.array.min\"),\n        max: t(\"mixed.array.max\"),\n        length: t(\"mixed.array.length\"),\n      },\n    },\n  });\n};\n\nexport default YupLocale;\n"]},"metadata":{},"sourceType":"module"}