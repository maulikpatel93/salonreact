{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport { persistStore } from \"redux-persist\";\nimport rootReducer from \"./reducer\";\nimport { Navigate } from 'react-router-dom';\nimport storage from 'redux-persist/lib/storage';\n\nconst actionMiddleware = store => next => action => {\n  // store.dispatch({ type: \"client/view/reset\" })\n  // console.log(action);\n  if (action.payload && action.payload.status && action.payload.status == 401) {\n    // storage.removeItem(`salon-auth`);\n    // storage.removeItem(`salon-client`);\n    persistStore(store).purge();\n  }\n\n  if (action.type == \"auth/logout/fulfilled\") {\n    persistStore(store).purge();\n  } // store.dispatch({ type: \"client/view/fulfilled\" });\n\n\n  return next(action);\n};\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: true,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    // serializableCheck: {\n    //   ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    // }\n    serializableCheck: false\n  }).concat(actionMiddleware)\n});\nconst persister = persistStore(store);\nexport { store, persister };","map":{"version":3,"sources":["/opt/lampp/htdocs/git/salonreact/src/store/index.js"],"names":["configureStore","persistStore","rootReducer","Navigate","storage","actionMiddleware","store","next","action","payload","status","purge","type","reducer","devTools","middleware","getDefaultMiddleware","serializableCheck","concat","persister"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,WAAP,MAAwB,WAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,2BAApB;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAYC,IAAD,IAAWC,MAAD,IAAY;AACxD;AACA;AACA,MAAGA,MAAM,CAACC,OAAP,IAAkBD,MAAM,CAACC,OAAP,CAAeC,MAAjC,IAA2CF,MAAM,CAACC,OAAP,CAAeC,MAAf,IAAyB,GAAvE,EAA2E;AACzE;AACA;AACAT,IAAAA,YAAY,CAACK,KAAD,CAAZ,CAAoBK,KAApB;AACD;;AACD,MAAIH,MAAM,CAACI,IAAP,IAAe,uBAAnB,EAA4C;AAC1CX,IAAAA,YAAY,CAACK,KAAD,CAAZ,CAAoBK,KAApB;AACD,GAVuD,CAWxD;;;AACA,SAAOJ,IAAI,CAACC,MAAD,CAAX;AACD,CAbD;;AAeA,MAAMF,KAAK,GAAGN,cAAc,CAAC;AAC3Ba,EAAAA,OAAO,EAAEX,WADkB;AAE3BY,EAAAA,QAAQ,EAAE,IAFiB;AAG3BC,EAAAA,UAAU,EAAGC,oBAAD,IACVA,oBAAoB,CAAC;AACnB;AACA;AACA;AACAC,IAAAA,iBAAiB,EAAE;AAJA,GAAD,CAApB,CAKGC,MALH,CAKUb,gBALV;AAJyB,CAAD,CAA5B;AAYA,MAAMc,SAAS,GAAGlB,YAAY,CAACK,KAAD,CAA9B;AAEA,SAASA,KAAT,EAAgBa,SAAhB","sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport { persistStore } from \"redux-persist\";\nimport rootReducer from \"./reducer\";\nimport { Navigate } from 'react-router-dom';\nimport storage from 'redux-persist/lib/storage';\n\nconst actionMiddleware = (store) => (next) => (action) => {\n  // store.dispatch({ type: \"client/view/reset\" })\n  // console.log(action);\n  if(action.payload && action.payload.status && action.payload.status == 401){\n    // storage.removeItem(`salon-auth`);\n    // storage.removeItem(`salon-client`);\n    persistStore(store).purge();\n  }\n  if (action.type == \"auth/logout/fulfilled\") {\n    persistStore(store).purge();\n  }\n  // store.dispatch({ type: \"client/view/fulfilled\" });\n  return next(action);\n};\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: true,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      // serializableCheck: {\n      //   ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n      // }\n      serializableCheck: false,\n    }).concat(actionMiddleware),\n});\n\nconst persister = persistStore(store);\n\nexport { store, persister };\n"]},"metadata":{},"sourceType":"module"}