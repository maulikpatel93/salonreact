{"ast":null,"code":"import i18n from \"i18next\";\nimport detector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from \"i18next-xhr-backend\"; // import translationEN from `${process.env.PUBLIC_URL}/locales/en/translation.json`;\n// import translationDE from '../public/locales/de/translation.json';\n// the translations\n// const resources = {\n//   en: {\n//     translation: translationEN\n//   },\n//   de: {\n//     translation: translationDE\n//   }\n// };\n\ni18n.use(Backend).use(detector).use(initReactI18next) // passes i18n down to react-i18next\n.init({\n  backend: {\n    loadPath: `${process.env.PUBLIC_URL}/locales/{{lng}}/{{ns}}.json`\n  },\n  load: \"unspecific\",\n  debug: true,\n  fallbackLng: \"en\",\n  // use en if detected lng is not available\n  // keySeparator: false, // we do not use keys in form messages.welcome\n  interpolation: {\n    escapeValue: false // react already safes from xss\n\n  }\n});\nexport default i18n;","map":{"version":3,"sources":["/opt/lampp/htdocs/git/salonreact/src/i18n.js"],"names":["i18n","detector","initReactI18next","Backend","use","init","backend","loadPath","process","env","PUBLIC_URL","load","debug","fallbackLng","interpolation","escapeValue"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,OAAOC,OAAP,MAAoB,qBAApB,C,CACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAH,IAAI,CACDI,GADH,CACOD,OADP,EAEGC,GAFH,CAEOH,QAFP,EAGGG,GAHH,CAGOF,gBAHP,EAGyB;AAHzB,CAIGG,IAJH,CAIQ;AACJC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAG,GAAEC,OAAO,CAACC,GAAR,CAAYC,UAAW;AAD7B,GADL;AAIJC,EAAAA,IAAI,EAAE,YAJF;AAKJC,EAAAA,KAAK,EAAE,IALH;AAMJC,EAAAA,WAAW,EAAE,IANT;AAMe;AACnB;AACAC,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE,KADA,CACO;;AADP;AARX,CAJR;AAgBA,eAAef,IAAf","sourcesContent":["import i18n from \"i18next\";\nimport detector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from \"i18next-xhr-backend\";\n// import translationEN from `${process.env.PUBLIC_URL}/locales/en/translation.json`;\n// import translationDE from '../public/locales/de/translation.json';\n\n// the translations\n// const resources = {\n//   en: {\n//     translation: translationEN\n//   },\n//   de: {\n//     translation: translationDE\n//   }\n// };\ni18n\n  .use(Backend)\n  .use(detector)\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    backend: {\n      loadPath: `${process.env.PUBLIC_URL}/locales/{{lng}}/{{ns}}.json`,\n    },\n    load: \"unspecific\",\n    debug: true,\n    fallbackLng: \"en\", // use en if detected lng is not available\n    // keySeparator: false, // we do not use keys in form messages.welcome\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  });\nexport default i18n;\n"]},"metadata":{},"sourceType":"module"}